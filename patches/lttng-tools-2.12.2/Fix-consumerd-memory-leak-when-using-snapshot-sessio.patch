From a9d5543ae227b1bb395e5cd7c63f83f28ffa5bdb Mon Sep 17 00:00:00 2001
Message-Id: <a9d5543ae227b1bb395e5cd7c63f83f28ffa5bdb.1601302746.git.anders.wallin@windriver.com>
From: Marian Florea <marian.florea@windriver.com>
Date: Thu, 21 Jul 2016 17:41:37 +0300
Subject: [PATCH] Fix: consumerd memory leak when using snapshot sessions

When starting tracing a snapshot session in an active environment
a metadata channel is created that on destroy is not freed. Because the
metadata channel created is not passed to the metadata thread/is not monitored,
the destruction of this channel can be done by notifying the channel thread.
Sessiond thread inside consumerd when receiving a close_metadata command
will now also notify the channel thread to destroy the metadata channel.

Fixes: #1017

Signed-off-by: Marian Florea <marian.florea@windriver.com>
Signed-off-by: Anders Wallin <anders.wallin@windriver.com>
---
 src/common/consumer/consumer.c         |  4 +++-
 src/common/ust-consumer/ust-consumer.c | 12 +++++++++---
 2 files changed, 12 insertions(+), 4 deletions(-)

diff --git a/src/common/consumer/consumer.c b/src/common/consumer/consumer.c
index 0a7a7ab6..ac125899 100644
--- a/src/common/consumer/consumer.c
+++ b/src/common/consumer/consumer.c
@@ -2993,7 +2993,9 @@ restart:
 							ERR("UST consumer get channel key %" PRIu64 " not found for del channel", key);
 							break;
 						}
-						lttng_poll_del(&events, chan->wait_fd);
+						if (chan->monitor) {
+							lttng_poll_del(&events, chan->wait_fd);
+						}
 						iter.iter.node = &chan->wait_fd_node.node;
 						ret = lttng_ht_del(channel_ht, &iter);
 						assert(ret == 0);
diff --git a/src/common/ust-consumer/ust-consumer.c b/src/common/ust-consumer/ust-consumer.c
index 209931f5..61237aa6 100644
--- a/src/common/ust-consumer/ust-consumer.c
+++ b/src/common/ust-consumer/ust-consumer.c
@@ -1685,10 +1685,16 @@ end_get_channel_nosignal:
 	case LTTNG_CONSUMER_CLOSE_METADATA:
 	{
 		int ret;
+		uint64_t key = msg.u.close_metadata.key;
 
-		ret = close_metadata(msg.u.close_metadata.key);
-		if (ret != 0) {
-			ret_code = ret;
+		channel = consumer_find_channel(key);
+		if (channel && !channel->monitor) {
+			notify_thread_del_channel(ctx, key);
+		} else {
+			ret = close_metadata(key);
+			if (ret != 0) {
+				ret_code = ret;
+			}
 		}
 
 		goto end_msg_sessiond;
-- 
2.28.0

