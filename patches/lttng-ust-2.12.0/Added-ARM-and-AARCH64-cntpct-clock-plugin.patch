From f79803e1073ef21fbf08b95e870d675e43498041 Mon Sep 17 00:00:00 2001
Message-Id: <f79803e1073ef21fbf08b95e870d675e43498041.1601298659.git.anders.wallin@windriver.com>
From: Anders Wallin <anders.wallin@windriver.com>
Date: Tue, 12 Jul 2016 13:17:52 +0200
Subject: [PATCH] Added ARM and AARCH64 cntpct clock plugin

Signed-off-by: Anders Wallin <anders.wallin@windriver.com>

Added AARCH64 support to the clock plugin

Signed-off-by: Anders Wallin <anders.wallin@windriver.com>

using correct cntpct frequency

Signed-off-by: Anders Wallin <anders.wallin@windriver.com>
---
 Makefile.am                                   |   1 +
 configure.ac                                  |  13 ++
 liblttng-ust-arm-cntpct-clock/Makefile.am     |   7 +
 .../lttng-ust-arm-cntpct-clock.c              | 125 ++++++++++++++++++
 4 files changed, 146 insertions(+)
 create mode 100644 liblttng-ust-arm-cntpct-clock/Makefile.am
 create mode 100644 liblttng-ust-arm-cntpct-clock/lttng-ust-arm-cntpct-clock.c

diff --git a/Makefile.am b/Makefile.am
index cc923c1d..5522d49e 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -2,6 +2,7 @@ ACLOCAL_AMFLAGS = -I m4
 
 SUBDIRS = . include snprintf libringbuffer liblttng-ust-comm \
 		liblttng-ust \
+		liblttng-ust-arm-cntpct-clock \
 		liblttng-ust-ctl \
 		liblttng-ust-fd \
 		liblttng-ust-fork \
diff --git a/configure.ac b/configure.ac
index 8b7d3284..e5fa0c82 100644
--- a/configure.ac
+++ b/configure.ac
@@ -393,6 +393,15 @@ AS_IF([test "x$python_agent" = "xyes"], [
 	AM_PATH_PYTHON([2.7])
 ])
 
+AC_ARG_ENABLE([arm_cntpct_clock], [
+AS_HELP_STRING([--enable-arm-cntpct-clock], [build the LTTng ARM cntpct clock plugin [default=no]])
+], [
+	arm_cntpct_clock=$enableval
+], [
+	arm_cntpct_clock=no
+])
+AM_CONDITIONAL([BUILD_ARM_CNTPCT_CLOCK], [test "x$arm_cntpct_clock" = "xyes"])
+
 # sdt.h integration
 AC_ARG_WITH([sdt], [
 AS_HELP_STRING([--with-sdt], [provide SystemTap integration via sdt.h [default=no]])
@@ -519,6 +528,7 @@ AC_CONFIG_FILES([
 	include/lttng/ust-version.h
 	snprintf/Makefile
 	libringbuffer/Makefile
+	liblttng-ust-arm-cntpct-clock/Makefile
 	liblttng-ust-comm/Makefile
 	liblttng-ust/Makefile
 	liblttng-ust-ctl/Makefile
@@ -623,6 +633,9 @@ PPRINT_PROP_BOOL_CUSTOM([Perf event integration], $value)
 test "x$enable_numa" = xyes && value=1 || value=0
 PPRINT_PROP_BOOL([NUMA], $value)
 
+test "x$arm_cntpct_clock" = xyes && value=1 || value=0
+PPRINT_PROP_BOOL_CUSTOM([ARM cntpct clock], $value, [use --enable-arm-cntpct-clock])
+
 AS_ECHO
 PPRINT_SET_INDENT(0)
 
diff --git a/liblttng-ust-arm-cntpct-clock/Makefile.am b/liblttng-ust-arm-cntpct-clock/Makefile.am
new file mode 100644
index 00000000..6c20004c
--- /dev/null
+++ b/liblttng-ust-arm-cntpct-clock/Makefile.am
@@ -0,0 +1,7 @@
+AM_CPPFLAGS = -I$(top_builddir)/include -I$(top_srcdir)/include
+
+if BUILD_ARM_CNTPCT_CLOCK
+lib_LTLIBRARIES = liblttng-ust-arm-cntpct-clock.la
+
+liblttng_ust_arm_cntpct_clock_la_SOURCES = lttng-ust-arm-cntpct-clock.c
+endif
diff --git a/liblttng-ust-arm-cntpct-clock/lttng-ust-arm-cntpct-clock.c b/liblttng-ust-arm-cntpct-clock/lttng-ust-arm-cntpct-clock.c
new file mode 100644
index 00000000..4687d885
--- /dev/null
+++ b/liblttng-ust-arm-cntpct-clock/lttng-ust-arm-cntpct-clock.c
@@ -0,0 +1,125 @@
+/*
+ * lttng-clock-arm-cntpct.c
+ *
+  * Copyright (c) 2016 Anders Wallin <anders.wallin@windriver.com>
+ * Based on lttng-clock-override-example.c from LTTng-ust example
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#include <stdlib.h>
+#include <time.h>
+#include <string.h>
+#include <stdio.h>
+#include <lttng/ust-clock.h>
+
+static uint64_t arm_cntpct_read64(void)
+{
+	uint64_t cval;
+#ifdef __arm__
+	asm volatile("mrrc p15, 0, %Q0, %R0, c14" : "=r" (cval));
+#elif defined(__aarch64__)
+	asm volatile("mrs %0, cntpct_el0" : "=r" (cval));
+#else
+	#warning ARM cntpct is only used for ARM or AARCH64 arch
+	cval = -1;
+#endif
+	return cval;
+}
+
+static uint64_t arm_cntpct_freq(void)
+{
+	unsigned int val;
+#ifdef __arm__
+	asm volatile("mrc p15, 0, %0, c14, c0, 0" : "=r" (val));
+#elif defined(__aarch64__)
+	asm volatile("mrs %0,   cntfrq_el0" : "=r" (val));
+#else
+	#warning ARM cntpct is only used for ARM or AARCH64 arch
+	val = -1;
+#endif
+        return val;
+}
+
+static int arm_cntpct_uuid(char *uuid)
+{
+	const char myuuid[] = "141d8e9c-ba93-409c-b490-765e40bb3e40";
+	memcpy(uuid, myuuid, LTTNG_UST_UUID_STR_LEN);
+	return 0;
+}
+
+static const char *arm_cntpct_name(void)
+{
+	return "ARM_CNTPCT";
+}
+
+static const char *arm_cntpct_description(void)
+{
+	return "ARM CNTPCT";
+}
+
+void lttng_ust_clock_plugin_init(void)
+{
+	int ret;
+
+	ret = lttng_ust_trace_clock_set_read64_cb(arm_cntpct_read64);
+	if (ret) {
+		fprintf(stderr, "Error setting clock arm_cntpct read64 callback: %s\n",
+			strerror(-ret));
+		goto error;
+	}
+	ret = lttng_ust_trace_clock_set_freq_cb(arm_cntpct_freq);
+	if (ret) {
+		fprintf(stderr, "Error setting clock arm_cntpct freq callback: %s\n",
+			strerror(-ret));
+		goto error;
+	}
+	ret = lttng_ust_trace_clock_set_uuid_cb(arm_cntpct_uuid);
+	if (ret) {
+		fprintf(stderr, "Error setting clock arm_cntpct uuid callback: %s\n",
+			strerror(-ret));
+		goto error;
+	}
+
+	ret = lttng_ust_trace_clock_set_name_cb(arm_cntpct_name);
+	if (ret) {
+		fprintf(stderr, "Error setting clock arm_cntpct name callback: %s\n",
+			strerror(-ret));
+		goto error;
+	}
+
+	ret = lttng_ust_trace_clock_set_description_cb(arm_cntpct_description);
+	if (ret) {
+		fprintf(stderr, "Error setting clock arm_cntpct description callback: %s\n",
+			strerror(-ret));
+		goto error;
+	}
+
+	ret = lttng_ust_enable_trace_clock_override();
+	if (ret) {
+		fprintf(stderr, "Error enabling clock arm_cntpct: %s\n",
+			strerror(-ret));
+		goto error;
+	}
+
+	return;
+
+error:
+	exit(EXIT_FAILURE);
+}
-- 
2.28.0

