From 69c21c7ecc204ba9d31f47a958792dc7ff576403 Mon Sep 17 00:00:00 2001
Message-Id: <69c21c7ecc204ba9d31f47a958792dc7ff576403.1621263288.git.wallinux@gmail.com>
From: Stefan Palade <stefan.palade@windriver.com>
Date: Wed, 6 Mar 2019 15:06:39 +0000
Subject: [PATCH] Tests: add missing multilib tracing test

Adding test files for multilib tracing with multiple lttng-consumerd.
By default only a single consumerd is started in ust based on long_bit value.
I overide the sourced start_lttng_sessiond_opt  in local to allow us to start
with both consumerd (32-bit/64-bit).

Signed-off-by: Stefan Palade <stefan.palade@windriver.com>
---
 configure.ac                                  |   1 +
 tests/Makefile.am                             |   4 +-
 tests/multilib_regression                     |   1 +
 tests/regression/Makefile.am                  |   1 +
 tests/regression/ust/Makefile.am              |   2 +
 .../regression/ust/multi-session/Makefile.am  |   4 +-
 .../ust/multi-session/test_ml_trace           | 187 ++++++++++++++++++
 .../ust/multilib-session/Makefile.am          |  24 +++
 .../ust/multilib-session/gen-nevents.c        |  43 ++++
 .../ust/multilib-session/test_ml_trace        | 187 ++++++++++++++++++
 tests/regression/ust/multilib-session/tp.c    |  10 +
 .../ust/multilib-session/ust_gen_nevents.h    |  54 +++++
 12 files changed, 514 insertions(+), 4 deletions(-)
 create mode 100644 tests/multilib_regression
 create mode 100755 tests/regression/ust/multi-session/test_ml_trace
 create mode 100644 tests/regression/ust/multilib-session/Makefile.am
 create mode 100644 tests/regression/ust/multilib-session/gen-nevents.c
 create mode 100755 tests/regression/ust/multilib-session/test_ml_trace
 create mode 100644 tests/regression/ust/multilib-session/tp.c
 create mode 100644 tests/regression/ust/multilib-session/ust_gen_nevents.h

diff --git a/configure.ac b/configure.ac
index 97c87e8f1..16f28b2ec 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1179,6 +1179,7 @@ AC_CONFIG_FILES([
 	tests/regression/ust/buffers-pid/Makefile
 	tests/regression/ust/periodical-metadata-flush/Makefile
 	tests/regression/ust/multi-session/Makefile
+	tests/regression/ust/multilib-session/Makefile
 	tests/regression/ust/multi-lib/Makefile
 	tests/regression/ust/overlap/Makefile
 	tests/regression/ust/overlap/demo/Makefile
diff --git a/tests/Makefile.am b/tests/Makefile.am
index 8f5c15d34..3f00621d6 100644
--- a/tests/Makefile.am
+++ b/tests/Makefile.am
@@ -16,8 +16,8 @@ else
 endif
 
 
-dist_noinst_SCRIPTS = run.sh fast_regression long_regression root_regression root_destructive_tests perf_regression
-EXTRA_DIST = run.sh fast_regression long_regression root_regression README root_destructive_tests perf_regression
+dist_noinst_SCRIPTS = run.sh fast_regression long_regression root_regression root_destructive_tests perf_regression multilib_regression
+EXTRA_DIST = run.sh fast_regression long_regression root_regression README root_destructive_tests perf_regression multilib_regression
 
 all-local:
 	@if [ x"$(srcdir)" != x"$(builddir)" ]; then \
diff --git a/tests/multilib_regression b/tests/multilib_regression
new file mode 100644
index 000000000..8b1a5371a
--- /dev/null
+++ b/tests/multilib_regression
@@ -0,0 +1 @@
+regression/ust/multilib-session/test_ml_trace
diff --git a/tests/regression/Makefile.am b/tests/regression/Makefile.am
index 8d8d2b2e9..d961c503e 100644
--- a/tests/regression/Makefile.am
+++ b/tests/regression/Makefile.am
@@ -57,6 +57,7 @@ SUBDIRS += ust
 TESTS += ust/before-after/test_before_after \
 	ust/buffers-pid/test_buffers_pid \
 	ust/multi-session/test_multi_session \
+	ust/multilib-session/test_ml_trace \
 	ust/nprocesses/test_nprocesses \
 	ust/overlap/test_overlap \
 	ust/java-jul/test_java_jul \
diff --git a/tests/regression/ust/Makefile.am b/tests/regression/ust/Makefile.am
index 49a1811ff..ae3dc26fc 100644
--- a/tests/regression/ust/Makefile.am
+++ b/tests/regression/ust/Makefile.am
@@ -1,6 +1,7 @@
 # SPDX-License-Identifier: GPL-2.0-only
 
 if HAVE_LIBLTTNG_UST_CTL
+
 SUBDIRS = \
 	before-after \
 	blocking \
@@ -18,6 +19,7 @@ SUBDIRS = \
 	low-throughput \
 	multi-lib \
 	multi-session \
+	multilib-session \
 	namespaces \
 	nprocesses \
 	overlap \
diff --git a/tests/regression/ust/multi-session/Makefile.am b/tests/regression/ust/multi-session/Makefile.am
index c50233fa8..7ed603f07 100644
--- a/tests/regression/ust/multi-session/Makefile.am
+++ b/tests/regression/ust/multi-session/Makefile.am
@@ -6,8 +6,8 @@ noinst_PROGRAMS = gen-nevents
 gen_nevents_SOURCES = gen-nevents.c tp.c ust_gen_nevents.h
 gen_nevents_LDADD = $(UST_LIBS) $(URCU_BP_LIBS) $(DL_LIBS)
 
-noinst_SCRIPTS = test_multi_session
-EXTRA_DIST = test_multi_session
+noinst_SCRIPTS = test_multi_session test_ml_trace
+EXTRA_DIST = test_multi_session test_ml_trace
 
 all-local:
 	@if [ x"$(srcdir)" != x"$(builddir)" ]; then \
diff --git a/tests/regression/ust/multi-session/test_ml_trace b/tests/regression/ust/multi-session/test_ml_trace
new file mode 100755
index 000000000..d6fab7f86
--- /dev/null
+++ b/tests/regression/ust/multi-session/test_ml_trace
@@ -0,0 +1,187 @@
+#!/bin/bash
+#
+# Copyright (C) 2012 David Goulet <dgoulet@efficios.com>
+#
+# SPDX-License-Identifier: LGPL-2.1-only
+
+TEST_DESC="UST tracer - Multilib-session tracing with 32/64-bit consumerd"
+
+CURDIR=$(dirname $0)
+DIR32=$(readlink -f $CURDIR | sed -e 's/lib64/lib/g')/
+TESTDIR=$CURDIR/../../..
+NR_ITER=100
+SESSION_NAME="multilib-session"
+EVENT_NAME="ust_gen_nevents:tptest"
+NUM_TESTS=30
+
+source $TESTDIR/utils/utils.sh
+
+alias default_start_lttng_sessiond_opt=start_lttng_sessiond_opt
+
+function start_lttng_sessiond_opt()
+{
+	local withtap=$1
+	local load_path=$2
+
+	local env_vars=""
+	local consumerd=""
+
+	local long_bit_value=
+	long_bit_value=$(getconf LONG_BIT)
+
+	if [ -n "$TEST_NO_SESSIOND" ] && [ "$TEST_NO_SESSIOND" == "1" ]; then
+		# Env variable requested no session daemon
+		return
+	fi
+
+	DIR=$(readlink -f "$TESTDIR")
+
+	# Get long_bit value for 32/64 consumerd
+	case "$long_bit_value" in
+		32)
+			consumerd="--consumerd32-path=$DIR/../src/bin/lttng-consumerd/lttng-consumerd"
+			;;
+		64)
+			consumerd="--consumerd64-path=$DIR/../src/bin/lttng-consumerd/lttng-consumerd"
+			;;
+		*)
+			return
+			;;
+	esac
+
+	# Check for env. variable. Allow the use of LD_PRELOAD etc.
+	if [[ "x${LTTNG_SESSIOND_ENV_VARS}" != "x" ]]; then
+		env_vars="${LTTNG_SESSIOND_ENV_VARS} "
+	fi
+	env_vars="${env_vars}$DIR/../src/bin/lttng-sessiond/$SESSIOND_BIN"
+
+	if ! validate_kernel_version; then
+	    fail "Start session daemon"
+	    BAIL_OUT "*** Kernel too old for session daemon tests ***"
+	fi
+
+	: "${LTTNG_SESSION_CONFIG_XSD_PATH="${DIR}/../src/common/config/"}"
+	export LTTNG_SESSION_CONFIG_XSD_PATH
+
+	if [ -z "$(pgrep "${SESSIOND_MATCH}")" ]; then
+		# Have a load path ?
+		if [ -n "$load_path" ]; then
+			# shellcheck disable=SC2086
+			env $env_vars --load "$load_path" --background "$consumerd"
+		else
+			# shellcheck disable=SC2086
+			env $env_vars --background "$consumerd"
+		fi
+		env $env_vars --background --consumerd32-path="$DIR32/../../../../src/bin/lttng-consumerd/lttng-consumerd" --consumerd64-path="$DIR/../src/bin/lttng-consumerd/lttng-consumerd" --verbose-consumer  >> /tmp/sessiond.log 2>&1 &
+		status=$?
+		if [ "$withtap" -eq "1" ]; then
+			ok $status "Start session daemon"
+		fi
+	fi
+}
+
+if [ ! -x "$CURDIR/gen-nevents" ]; then
+	BAIL_OUT "No UST nevents binary detected."
+fi
+
+if [ ! -x "$DIR32/gen-nevents" ]; then
+	BAIL_OUT "No UST nevents 32-bit binary detected."
+fi
+
+file $DIR32/gen-nevents | grep "32-bit"
+if [ $? -ne 0 ]; then
+    BAIL_OUT "$DIR32/gen-nevents is not 32-bit"
+fi
+
+# MUST set TESTDIR before calling those functions
+
+test_multi_session() {
+	local out
+
+	# BEFORE application is spawned
+	for i in `seq 0 1`; do
+		create_lttng_session_ok "$SESSION_NAME-$i" "$TRACE_PATH/$i"
+		enable_ust_lttng_event_ok "$SESSION_NAME-$i" "$EVENT_NAME$i"
+		start_lttng_tracing_ok "$SESSION_NAME-$i"
+	done
+
+	$CURDIR/gen-nevents $NR_ITER &
+	ok $? "Start application to generate $NR_ITER events"
+
+	wait
+	pass "Wait for events to record"
+
+	for i in `seq 0 1`; do
+		stop_lttng_tracing_ok "$SESSION_NAME-$i"
+		destroy_lttng_session_ok "$SESSION_NAME-$i"
+		out=$(babeltrace "$TRACE_PATH/$i" | grep "$EVENT_NAMEi$i" | wc -l)
+		if [ $out -ne $NR_ITER ]; then
+			fail "Trace validation of $SESSION_NAME-$i"
+			diag "No events found."
+			out=1
+			break
+		else
+			pass "Trace validation of $SESSION_NAME-$i"
+			diag "Found $out event(s) for $SESSION_NAME-$i."
+			out=0
+		fi
+	done
+
+	return $out
+}
+
+test_multi32_session() {
+	local out
+
+	# BEFORE application is spawned
+	for i in `seq 0 1`; do
+		create_lttng_session_ok "$SESSION_NAME-$i" "$TRACE_PATH/$i"
+		enable_ust_lttng_event_ok "$SESSION_NAME-$i" "$EVENT_NAME$i"
+		start_lttng_tracing_ok "$SESSION_NAME-$i"
+	done
+
+	$DIR32/gen-nevents $NR_ITER &
+	ok $? "Start 32-bit application to generate $NR_ITER events"
+
+	wait
+	pass "Wait for events to record"
+
+	for i in `seq 0 1`; do
+		stop_lttng_tracing_ok "$SESSION_NAME-$i"
+		destroy_lttng_session_ok "$SESSION_NAME-$i"
+		out=$(babeltrace "$TRACE_PATH/$i" | grep "$EVENT_NAMEi$i" | wc -l)
+		if [ $out -ne $NR_ITER ]; then
+			fail "Trace validation of $SESSION_NAME-$i"
+			diag "No events found."
+			out=1
+			break
+		else
+			pass "Trace validation of $SESSION_NAME-$i"
+			diag "Found $out event(s) for $SESSION_NAME-$i."
+			out=0
+		fi
+	done
+
+	return $out
+}
+# MUST set TESTDIR before calling those functions
+
+plan_tests $NUM_TESTS
+
+print_test_banner "$TEST_DESC"
+
+start_lttng_sessiond
+
+TRACE_PATH=$(mktemp -d)
+
+test_multi_session
+test_multi32_session
+out=$?
+if [ $out -ne 0 ]; then
+	stop_lttng_sessiond
+	exit $out
+fi
+
+stop_lttng_sessiond
+
+rm -rf "$TRACE_PATH"
diff --git a/tests/regression/ust/multilib-session/Makefile.am b/tests/regression/ust/multilib-session/Makefile.am
new file mode 100644
index 000000000..a1a21b6df
--- /dev/null
+++ b/tests/regression/ust/multilib-session/Makefile.am
@@ -0,0 +1,24 @@
+# SPDX-License-Identifier: GPL-2.0-only
+
+AM_CFLAGS += -I$(srcdir)
+
+noinst_PROGRAMS = gen-nevents
+gen_nevents_SOURCES = gen-nevents.c tp.c ust_gen_nevents.h
+gen_nevents_LDADD = $(UST_LIBS) -lurcu-bp $(DL_LIBS)
+
+noinst_SCRIPTS = test_ml_trace
+EXTRA_DIST = test_ml_trace
+
+all-local:
+	@if [ x"$(srcdir)" != x"$(builddir)" ]; then \
+		for script in $(EXTRA_DIST); do \
+			cp -f $(srcdir)/$$script $(builddir); \
+		done; \
+	fi
+
+clean-local:
+	@if [ x"$(srcdir)" != x"$(builddir)" ]; then \
+		for script in $(EXTRA_DIST); do \
+			rm -f $(builddir)/$$script; \
+		done; \
+	fi
diff --git a/tests/regression/ust/multilib-session/gen-nevents.c b/tests/regression/ust/multilib-session/gen-nevents.c
new file mode 100644
index 000000000..405684c32
--- /dev/null
+++ b/tests/regression/ust/multilib-session/gen-nevents.c
@@ -0,0 +1,43 @@
+/*
+ * Copyright (C) 2009 Pierre-Marc Fournier
+ * Copyright (C) 2011 Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
+ * Copyright (C) 2012 David Goulet <dgoulet@efficios.com>
+ *
+ * SPDX-License-Identifier: LGPL-2.1-only
+ *
+ */
+
+#define _LGPL_SOURCE
+#include <arpa/inet.h>
+#include <fcntl.h>
+#include <signal.h>
+#include <stdarg.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <unistd.h>
+
+#define TRACEPOINT_DEFINE
+#include "ust_gen_nevents.h"
+
+int main(int argc, char **argv)
+{
+	int i, nr_iter = 100;
+	long value = 42;
+
+	if (argc == 2) {
+		nr_iter = atoi(argv[1]);
+	}
+
+	for (i = 0; i < nr_iter; i++) {
+		tracepoint(ust_gen_nevents, tptest0, i, value);
+		tracepoint(ust_gen_nevents, tptest1, i, value);
+		tracepoint(ust_gen_nevents, tptest2, i, value);
+		tracepoint(ust_gen_nevents, tptest3, i, value);
+	}
+
+	return 0;
+}
diff --git a/tests/regression/ust/multilib-session/test_ml_trace b/tests/regression/ust/multilib-session/test_ml_trace
new file mode 100755
index 000000000..d6fab7f86
--- /dev/null
+++ b/tests/regression/ust/multilib-session/test_ml_trace
@@ -0,0 +1,187 @@
+#!/bin/bash
+#
+# Copyright (C) 2012 David Goulet <dgoulet@efficios.com>
+#
+# SPDX-License-Identifier: LGPL-2.1-only
+
+TEST_DESC="UST tracer - Multilib-session tracing with 32/64-bit consumerd"
+
+CURDIR=$(dirname $0)
+DIR32=$(readlink -f $CURDIR | sed -e 's/lib64/lib/g')/
+TESTDIR=$CURDIR/../../..
+NR_ITER=100
+SESSION_NAME="multilib-session"
+EVENT_NAME="ust_gen_nevents:tptest"
+NUM_TESTS=30
+
+source $TESTDIR/utils/utils.sh
+
+alias default_start_lttng_sessiond_opt=start_lttng_sessiond_opt
+
+function start_lttng_sessiond_opt()
+{
+	local withtap=$1
+	local load_path=$2
+
+	local env_vars=""
+	local consumerd=""
+
+	local long_bit_value=
+	long_bit_value=$(getconf LONG_BIT)
+
+	if [ -n "$TEST_NO_SESSIOND" ] && [ "$TEST_NO_SESSIOND" == "1" ]; then
+		# Env variable requested no session daemon
+		return
+	fi
+
+	DIR=$(readlink -f "$TESTDIR")
+
+	# Get long_bit value for 32/64 consumerd
+	case "$long_bit_value" in
+		32)
+			consumerd="--consumerd32-path=$DIR/../src/bin/lttng-consumerd/lttng-consumerd"
+			;;
+		64)
+			consumerd="--consumerd64-path=$DIR/../src/bin/lttng-consumerd/lttng-consumerd"
+			;;
+		*)
+			return
+			;;
+	esac
+
+	# Check for env. variable. Allow the use of LD_PRELOAD etc.
+	if [[ "x${LTTNG_SESSIOND_ENV_VARS}" != "x" ]]; then
+		env_vars="${LTTNG_SESSIOND_ENV_VARS} "
+	fi
+	env_vars="${env_vars}$DIR/../src/bin/lttng-sessiond/$SESSIOND_BIN"
+
+	if ! validate_kernel_version; then
+	    fail "Start session daemon"
+	    BAIL_OUT "*** Kernel too old for session daemon tests ***"
+	fi
+
+	: "${LTTNG_SESSION_CONFIG_XSD_PATH="${DIR}/../src/common/config/"}"
+	export LTTNG_SESSION_CONFIG_XSD_PATH
+
+	if [ -z "$(pgrep "${SESSIOND_MATCH}")" ]; then
+		# Have a load path ?
+		if [ -n "$load_path" ]; then
+			# shellcheck disable=SC2086
+			env $env_vars --load "$load_path" --background "$consumerd"
+		else
+			# shellcheck disable=SC2086
+			env $env_vars --background "$consumerd"
+		fi
+		env $env_vars --background --consumerd32-path="$DIR32/../../../../src/bin/lttng-consumerd/lttng-consumerd" --consumerd64-path="$DIR/../src/bin/lttng-consumerd/lttng-consumerd" --verbose-consumer  >> /tmp/sessiond.log 2>&1 &
+		status=$?
+		if [ "$withtap" -eq "1" ]; then
+			ok $status "Start session daemon"
+		fi
+	fi
+}
+
+if [ ! -x "$CURDIR/gen-nevents" ]; then
+	BAIL_OUT "No UST nevents binary detected."
+fi
+
+if [ ! -x "$DIR32/gen-nevents" ]; then
+	BAIL_OUT "No UST nevents 32-bit binary detected."
+fi
+
+file $DIR32/gen-nevents | grep "32-bit"
+if [ $? -ne 0 ]; then
+    BAIL_OUT "$DIR32/gen-nevents is not 32-bit"
+fi
+
+# MUST set TESTDIR before calling those functions
+
+test_multi_session() {
+	local out
+
+	# BEFORE application is spawned
+	for i in `seq 0 1`; do
+		create_lttng_session_ok "$SESSION_NAME-$i" "$TRACE_PATH/$i"
+		enable_ust_lttng_event_ok "$SESSION_NAME-$i" "$EVENT_NAME$i"
+		start_lttng_tracing_ok "$SESSION_NAME-$i"
+	done
+
+	$CURDIR/gen-nevents $NR_ITER &
+	ok $? "Start application to generate $NR_ITER events"
+
+	wait
+	pass "Wait for events to record"
+
+	for i in `seq 0 1`; do
+		stop_lttng_tracing_ok "$SESSION_NAME-$i"
+		destroy_lttng_session_ok "$SESSION_NAME-$i"
+		out=$(babeltrace "$TRACE_PATH/$i" | grep "$EVENT_NAMEi$i" | wc -l)
+		if [ $out -ne $NR_ITER ]; then
+			fail "Trace validation of $SESSION_NAME-$i"
+			diag "No events found."
+			out=1
+			break
+		else
+			pass "Trace validation of $SESSION_NAME-$i"
+			diag "Found $out event(s) for $SESSION_NAME-$i."
+			out=0
+		fi
+	done
+
+	return $out
+}
+
+test_multi32_session() {
+	local out
+
+	# BEFORE application is spawned
+	for i in `seq 0 1`; do
+		create_lttng_session_ok "$SESSION_NAME-$i" "$TRACE_PATH/$i"
+		enable_ust_lttng_event_ok "$SESSION_NAME-$i" "$EVENT_NAME$i"
+		start_lttng_tracing_ok "$SESSION_NAME-$i"
+	done
+
+	$DIR32/gen-nevents $NR_ITER &
+	ok $? "Start 32-bit application to generate $NR_ITER events"
+
+	wait
+	pass "Wait for events to record"
+
+	for i in `seq 0 1`; do
+		stop_lttng_tracing_ok "$SESSION_NAME-$i"
+		destroy_lttng_session_ok "$SESSION_NAME-$i"
+		out=$(babeltrace "$TRACE_PATH/$i" | grep "$EVENT_NAMEi$i" | wc -l)
+		if [ $out -ne $NR_ITER ]; then
+			fail "Trace validation of $SESSION_NAME-$i"
+			diag "No events found."
+			out=1
+			break
+		else
+			pass "Trace validation of $SESSION_NAME-$i"
+			diag "Found $out event(s) for $SESSION_NAME-$i."
+			out=0
+		fi
+	done
+
+	return $out
+}
+# MUST set TESTDIR before calling those functions
+
+plan_tests $NUM_TESTS
+
+print_test_banner "$TEST_DESC"
+
+start_lttng_sessiond
+
+TRACE_PATH=$(mktemp -d)
+
+test_multi_session
+test_multi32_session
+out=$?
+if [ $out -ne 0 ]; then
+	stop_lttng_sessiond
+	exit $out
+fi
+
+stop_lttng_sessiond
+
+rm -rf "$TRACE_PATH"
diff --git a/tests/regression/ust/multilib-session/tp.c b/tests/regression/ust/multilib-session/tp.c
new file mode 100644
index 000000000..e614e5613
--- /dev/null
+++ b/tests/regression/ust/multilib-session/tp.c
@@ -0,0 +1,10 @@
+/*
+ * Copyright (C) 2011 Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
+ * Copyright (C) 2012 David Goulet <dgoulet@efficios.com>
+ *
+ * SPDX-License-Identifier: MIT
+ */
+
+#define _LGPL_SOURCE
+#define TRACEPOINT_CREATE_PROBES
+#include "ust_gen_nevents.h"
diff --git a/tests/regression/ust/multilib-session/ust_gen_nevents.h b/tests/regression/ust/multilib-session/ust_gen_nevents.h
new file mode 100644
index 000000000..09fb640a9
--- /dev/null
+++ b/tests/regression/ust/multilib-session/ust_gen_nevents.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (C) 2011 Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
+ *
+ * SPDX-License-Identifier: MIT
+ *
+ */
+
+#undef TRACEPOINT_PROVIDER
+#define TRACEPOINT_PROVIDER ust_gen_nevents
+
+#if !defined(_TRACEPOINT_UST_GEN_NEVENTS_H) || defined(TRACEPOINT_HEADER_MULTI_READ)
+#define _TRACEPOINT_UST_GEN_NEVENTS_H
+
+#include <lttng/tracepoint.h>
+
+TRACEPOINT_EVENT(ust_gen_nevents, tptest0,
+	TP_ARGS(int, anint, long, value),
+	TP_FIELDS(
+		ctf_integer(int, intfield, anint)
+		ctf_integer(long, longfield, value)
+	)
+)
+
+TRACEPOINT_EVENT(ust_gen_nevents, tptest1,
+	TP_ARGS(int, anint, long, value),
+	TP_FIELDS(
+		ctf_integer(int, intfield, anint)
+		ctf_integer(long, longfield, value)
+	)
+)
+
+TRACEPOINT_EVENT(ust_gen_nevents, tptest2,
+	TP_ARGS(int, anint, long, value),
+	TP_FIELDS(
+		ctf_integer(int, intfield, anint)
+		ctf_integer(long, longfield, value)
+	)
+)
+
+TRACEPOINT_EVENT(ust_gen_nevents, tptest3,
+	TP_ARGS(int, anint, long, value),
+	TP_FIELDS(
+		ctf_integer(int, intfield, anint)
+		ctf_integer(long, longfield, value)
+	)
+)
+
+#endif /* _TRACEPOINT_UST_GEN_NEVENTS_H */
+
+#undef TRACEPOINT_INCLUDE
+#define TRACEPOINT_INCLUDE "./ust_gen_nevents.h"
+
+/* This part must be outside ifdef protection */
+#include <lttng/tracepoint-event.h>
-- 
2.25.1

