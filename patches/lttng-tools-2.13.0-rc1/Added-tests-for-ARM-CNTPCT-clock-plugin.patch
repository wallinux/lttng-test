From 54bed84527bf269368143f61a9fec16d52db49ac Mon Sep 17 00:00:00 2001
Message-Id: <54bed84527bf269368143f61a9fec16d52db49ac.1617281679.git.wallinux@gmail.com>
From: Anders Wallin <anders.wallin@windriver.com>
Date: Mon, 11 Jul 2016 15:54:44 +0200
Subject: [PATCH] Added tests for ARM CNTPCT clock plugin

added clock tests for monotonic and arm_cntpct clock

Signed-off-by: Anders Wallin <anders.wallin@windriver.com>
---
 tests/Makefile.am                             |   4 +-
 tests/rcs_regression                          |   3 +
 tests/regression/kernel/Makefile.am           |   2 +
 tests/regression/kernel/test_clock_arm_cntpct | 184 ++++++++++++++++++
 tests/regression/kernel/test_clock_timestamp  | 173 ++++++++++++++++
 .../regression/ust/clock-override/Makefile.am |   6 +-
 .../ust/clock-override/test_clock_arm_cntpct  | 171 ++++++++++++++++
 7 files changed, 538 insertions(+), 5 deletions(-)
 create mode 100644 tests/rcs_regression
 create mode 100755 tests/regression/kernel/test_clock_arm_cntpct
 create mode 100755 tests/regression/kernel/test_clock_timestamp
 create mode 100755 tests/regression/ust/clock-override/test_clock_arm_cntpct

diff --git a/tests/Makefile.am b/tests/Makefile.am
index 8f5c15d3..3d3ba886 100644
--- a/tests/Makefile.am
+++ b/tests/Makefile.am
@@ -16,8 +16,8 @@ else
 endif
 
 
-dist_noinst_SCRIPTS = run.sh fast_regression long_regression root_regression root_destructive_tests perf_regression
-EXTRA_DIST = run.sh fast_regression long_regression root_regression README root_destructive_tests perf_regression
+dist_noinst_SCRIPTS = run.sh fast_regression long_regression root_regression root_destructive_tests perf_regression rcs_regression
+EXTRA_DIST = run.sh fast_regression long_regression root_regression README root_destructive_tests perf_regression rcs_regression
 
 all-local:
 	@if [ x"$(srcdir)" != x"$(builddir)" ]; then \
diff --git a/tests/rcs_regression b/tests/rcs_regression
new file mode 100644
index 00000000..56a4ee27
--- /dev/null
+++ b/tests/rcs_regression
@@ -0,0 +1,3 @@
+regression/kernel/test_clock_timestamp
+regression/kernel/test_clock_arm_cntpct
+regression/ust/clock-override/test_clock_arm_cntpct
diff --git a/tests/regression/kernel/Makefile.am b/tests/regression/kernel/Makefile.am
index 040b7642..43849807 100644
--- a/tests/regression/kernel/Makefile.am
+++ b/tests/regression/kernel/Makefile.am
@@ -4,7 +4,9 @@
 EXTRA_DIST = test_all_events \
 						 test_callstack \
 						 test_channel \
+						 test_clock_arm_cntpct \
 						 test_clock_override \
+						 test_clock_timestamp \
 						 test_event_basic \
 						 test_kernel_function \
 						 test_lttng_logger \
diff --git a/tests/regression/kernel/test_clock_arm_cntpct b/tests/regression/kernel/test_clock_arm_cntpct
new file mode 100755
index 00000000..555f33fd
--- /dev/null
+++ b/tests/regression/kernel/test_clock_arm_cntpct
@@ -0,0 +1,184 @@
+#!/bin/bash
+#
+# Copyright (C) - 2013 Christian Babeux <christian.babeux@efficios.com>
+# Copyright (C) - 2014, 2016 Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
+# Copyright (C) - 2016 Anders Wallin <anders.wallin@windriver.com>
+#
+# This program is free software; you can redistribute it and/or modify it
+# under the terms of the GNU General Public License, version 2 only, as
+# published by the Free Software Foundation.
+#
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+# more details.
+#
+# You should have received a copy of the GNU General Public License along with
+# this program; if not, write to the Free Software Foundation, Inc., 51
+# Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+TEST_DESC="Kernel tracer - Clock arm cntpct plugin"
+
+CURDIR=$(dirname $0)/
+TESTDIR=$CURDIR/../..
+SESSION_NAME="clock_arm_cntpct"
+
+NUM_TESTS=20
+EVENT_NAME="lttng_test_filter_event"
+
+TESTCMD="echo -n 10 > /proc/lttng-test-filter-event"
+
+METADATA_CLOCK_START_TOKEN="clock {"
+METADATA_CLOCK_END_TOKEN="};"
+
+METADATA_TOKEN_LIST=(
+	"name"
+	"description"
+)
+
+CLOCK_TOKEN_VALUE=(
+	"ARM_CNTPCT"
+	"ARM CNTPCT"
+)
+
+source $TESTDIR/utils/utils.sh
+
+function signal_cleanup()
+{
+	diag "*** Exiting ***"
+	rmmod lttng-test
+	stop_lttng_sessiond
+	rmmod lttng-clock-plugin-arm-cntpct
+	rmmod lttng-clock
+	exit 1
+}
+
+function extract_clock_metadata()
+{
+	local metadata_file=$1
+	local clock_metadata_file_destination=$2
+	cat $metadata_file \
+		| sed -n "/$METADATA_CLOCK_START_TOKEN/,/$METADATA_CLOCK_END_TOKEN/p" \
+		> $clock_metadata_file_destination
+	ok $? "Clock metadata extraction"
+}
+
+function extract_clock_metadata_token()
+{
+	local clock_metadata_file=$1
+	local token=$2
+	# Look for token and get value between ""
+	cat $clock_metadata_file | grep $token | awk -F"= |;" '{print $2}' | tr -d '"'
+}
+
+function test_clock_arm_cntpct_metadata()
+{
+	local ctf_metadata_file=$(mktemp -p $TRACE_PATH ctf-metadata.XXXXX)
+	local clock_metadata_file=$(mktemp -p $TRACE_PATH clock-metadata.XXXXX)
+	local result=""
+
+	diag "Clock arm_cntpct plugin metadata test"
+
+	modprobe lttng-clock-plugin-arm-cntpct
+
+	start_lttng_sessiond
+	modprobe lttng-test
+
+	create_lttng_session_ok $SESSION_NAME $TRACE_PATH
+	enable_kernel_lttng_event_ok $SESSION_NAME "$EVENT_NAME"
+	start_lttng_tracing_ok $SESSION_NAME
+	eval ${TESTCMD}
+	stop_lttng_tracing_ok $SESSION_NAME
+	destroy_lttng_session_ok $SESSION_NAME
+
+	rmmod lttng-test
+	stop_lttng_sessiond
+	rmmod lttng-clock-plugin-arm-cntpct
+	rmmod lttng-clock
+
+	$BABELTRACE_BIN -o ctf-metadata -w $ctf_metadata_file $TRACE_PATH
+	ok $? "Metadata extraction from babeltrace"
+
+	extract_clock_metadata $ctf_metadata_file $clock_metadata_file
+
+	test ${#METADATA_TOKEN_LIST[@]} -eq ${#CLOCK_TOKEN_VALUE[@]}
+	ok $? "Tokens to check(${#METADATA_TOKEN_LIST[@]}) and provided values(${#CLOCK_TOKEN_VALUE[@]}) count is equal"
+
+	local counter=0
+	while [ "$counter" -lt "${#METADATA_TOKEN_LIST[@]}" ]; do
+		result=$(extract_clock_metadata_token $clock_metadata_file \
+			${METADATA_TOKEN_LIST[$counter]})
+		test "$result" == "${CLOCK_TOKEN_VALUE[$counter]}"
+		ok $? "Token \"${METADATA_TOKEN_LIST[$counter]}\" expect:${CLOCK_TOKEN_VALUE[$counter]} got:$result"
+		let "counter++"
+	done
+	rm -rf $ctf_metadata_file
+	rm -rf $clock_metadata_file
+}
+
+function test_clock_arm_cntpct_timestamp()
+{
+	diag "Clock arm_cntpct test"
+
+	modprobe lttng-clock-plugin-arm-cntpct
+
+	start_lttng_sessiond
+	modprobe lttng-test
+
+	create_lttng_session_ok $SESSION_NAME $TRACE_PATH
+	enable_kernel_lttng_event_ok $SESSION_NAME "$EVENT_NAME"
+	start_lttng_tracing_ok $SESSION_NAME
+	eval ${TESTCMD}
+	stop_lttng_tracing_ok $SESSION_NAME
+	destroy_lttng_session_ok $SESSION_NAME
+
+
+	# Use Babeltrace with "-n all" to give a comma separated list for
+	# easy extraction of timestamps.
+	unique_timestamps_count=$($BABELTRACE_BIN -n all $TRACE_PATH | \
+					 cut -d, -f1 | uniq | wc -l)
+	test $unique_timestamps_count -gt 1
+	ok $? "Unique event timestamps without clock override: $unique_timestamps_count expect >1"
+
+	rmmod lttng-test
+	stop_lttng_sessiond
+
+	rmmod lttng-clock-plugin-arm-cntpct
+	rmmod lttng-clock
+}
+
+# MUST set TESTDIR before calling those functions
+plan_tests $NUM_TESTS
+
+print_test_banner "$TEST_DESC"
+
+TESTS=(
+	"test_clock_arm_cntpct_metadata"
+	"test_clock_arm_cntpct_timestamp"
+)
+
+TEST_COUNT=${#TESTS[@]}
+i=0
+
+if [ "$(id -u)" == "0" ]; then
+	isroot=1
+else
+	isroot=0
+fi
+
+skip $isroot "Root access is needed. Skipping all tests." $NUM_TESTS ||
+{
+	trap signal_cleanup SIGTERM SIGINT
+
+	while [ "$i" -lt "$TEST_COUNT" ]; do
+
+		TRACE_PATH=$(mktemp -d)
+
+		# Execute test
+		${TESTS[$i]}
+
+		rm -rf $TRACE_PATH
+
+		let "i++"
+	done
+}
diff --git a/tests/regression/kernel/test_clock_timestamp b/tests/regression/kernel/test_clock_timestamp
new file mode 100755
index 00000000..1d4793ee
--- /dev/null
+++ b/tests/regression/kernel/test_clock_timestamp
@@ -0,0 +1,173 @@
+#!/bin/bash
+#
+# Copyright (C) - 2013 Christian Babeux <christian.babeux@efficios.com>
+# Copyright (C) - 2014, 2016 Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
+# Copyright (C) - 2016 Anders Wallin <anders.wallin@windriver.com>
+#
+# This program is free software; you can redistribute it and/or modify it
+# under the terms of the GNU General Public License, version 2 only, as
+# published by the Free Software Foundation.
+#
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+# more details.
+#
+# You should have received a copy of the GNU General Public License along with
+# this program; if not, write to the Free Software Foundation, Inc., 51
+# Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+TEST_DESC="Kernel tracer - Clock timestamp"
+
+CURDIR=$(dirname $0)/
+TESTDIR=$CURDIR/../..
+SESSION_NAME="clock_timestamp"
+
+NUM_TESTS=20
+EVENT_NAME="lttng_test_filter_event"
+
+TESTCMD="echo -n 10 > /proc/lttng-test-filter-event"
+METADATA_CLOCK_START_TOKEN="clock {"
+METADATA_CLOCK_END_TOKEN="};"
+
+METADATA_TOKEN_LIST=(
+	"name"
+	"description"
+)
+
+CLOCK_TOKEN_VALUE=(
+	"monotonic"
+	"Monotonic Clock"
+)
+
+source $TESTDIR/utils/utils.sh
+
+function signal_cleanup()
+{
+	diag "*** Exiting ***"
+	rmmod lttng-test
+	stop_lttng_sessiond
+	rmmod lttng-clock
+	exit 1
+}
+
+function extract_clock_metadata()
+{
+	local metadata_file=$1
+	local clock_metadata_file_destination=$2
+	cat $metadata_file \
+		| sed -n "/$METADATA_CLOCK_START_TOKEN/,/$METADATA_CLOCK_END_TOKEN/p" \
+		> $clock_metadata_file_destination
+	ok $? "Clock metadata extraction"
+}
+
+function extract_clock_metadata_token()
+{
+	local clock_metadata_file=$1
+	local token=$2
+	# Look for token and get value between ""
+	cat $clock_metadata_file | grep $token | awk -F"= |;" '{print $2}' | tr -d '"'
+}
+
+function test_clock_metadata()
+{
+	local ctf_metadata_file=$(mktemp -p $TRACE_PATH ctf-metadata.XXXXX)
+	local clock_metadata_file=$(mktemp -p $TRACE_PATH clock-metadata.XXXXX)
+	local result=""
+
+	diag "Clock metadata test"
+
+	start_lttng_sessiond
+	modprobe lttng-test
+
+	create_lttng_session_ok $SESSION_NAME $TRACE_PATH
+	enable_kernel_lttng_event_ok $SESSION_NAME "$EVENT_NAME"
+	start_lttng_tracing_ok $SESSION_NAME
+	eval ${TESTCMD}
+	stop_lttng_tracing_ok $SESSION_NAME
+	destroy_lttng_session_ok $SESSION_NAME
+
+	rmmod lttng-test
+	stop_lttng_sessiond
+	rmmod lttng-clock
+
+	$BABELTRACE_BIN -o ctf-metadata -w $ctf_metadata_file $TRACE_PATH
+	ok $? "Metadata extraction from babeltrace"
+
+	extract_clock_metadata $ctf_metadata_file $clock_metadata_file
+
+	test ${#METADATA_TOKEN_LIST[@]} -eq ${#CLOCK_TOKEN_VALUE[@]}
+	ok $? "Tokens to check(${#METADATA_TOKEN_LIST[@]}) and provided values(${#CLOCK_TOKEN_VALUE[@]}) count is equal"
+
+	local counter=0
+	while [ "$counter" -lt "${#METADATA_TOKEN_LIST[@]}" ]; do
+		result=$(extract_clock_metadata_token $clock_metadata_file \
+			${METADATA_TOKEN_LIST[$counter]})
+		test "$result" == "${CLOCK_TOKEN_VALUE[$counter]}"
+		ok $? "Token \"${METADATA_TOKEN_LIST[$counter]}\" expect:${CLOCK_TOKEN_VALUE[$counter]} got:$result"
+		let "counter++"
+	done
+	rm -rf $ctf_metadata_file
+	rm -rf $clock_metadata_file
+}
+
+function test_clock_timestamp()
+{
+	diag "Clock timestamp test"
+
+	start_lttng_sessiond
+	modprobe lttng-test
+
+	create_lttng_session_ok $SESSION_NAME $TRACE_PATH
+	enable_kernel_lttng_event_ok $SESSION_NAME "$EVENT_NAME"
+	start_lttng_tracing_ok $SESSION_NAME
+	eval ${TESTCMD}
+	stop_lttng_tracing_ok $SESSION_NAME
+	destroy_lttng_session_ok $SESSION_NAME
+
+	# Use Babeltrace with "-n all" to give a comma separated list for
+	# easy extraction of timestamps.
+	unique_timestamps_count=$($BABELTRACE_BIN -n all $TRACE_PATH | \
+		cut -d, -f1 | uniq | wc -l)
+	test $unique_timestamps_count -gt 1
+	ok $? "Unique event timestamps without clock override: $unique_timestamps_count expect >1"
+
+	rmmod lttng-test
+	stop_lttng_sessiond
+}
+
+# MUST set TESTDIR before calling those functions
+plan_tests $NUM_TESTS
+
+print_test_banner "$TEST_DESC"
+
+TESTS=(
+	"test_clock_metadata"
+	"test_clock_timestamp"
+)
+
+TEST_COUNT=${#TESTS[@]}
+i=0
+
+if [ "$(id -u)" == "0" ]; then
+	isroot=1
+else
+	isroot=0
+fi
+
+skip $isroot "Root access is needed. Skipping all tests." $NUM_TESTS ||
+{
+	trap signal_cleanup SIGTERM SIGINT
+
+	while [ "$i" -lt "$TEST_COUNT" ]; do
+
+		TRACE_PATH=$(mktemp -d)
+
+		# Execute test
+		${TESTS[$i]}
+
+		rm -rf $TRACE_PATH
+
+		let "i++"
+	done
+}
diff --git a/tests/regression/ust/clock-override/Makefile.am b/tests/regression/ust/clock-override/Makefile.am
index 9495bca0..cfb3a94e 100644
--- a/tests/regression/ust/clock-override/Makefile.am
+++ b/tests/regression/ust/clock-override/Makefile.am
@@ -7,7 +7,7 @@ if NO_SHARED
 CLEANFILES = lttng-ust-clock-override-test.so \
 	lttng-ust-clock-override-test.so.debug
 
-EXTRA_DIST = test_clock_override lttng-ust-clock-override-test.c
+EXTRA_DIST = test_clock_override lttng-ust-clock-override-test.c test_clock_arm_cntpct
 
 else
 
@@ -25,8 +25,8 @@ lttng_ust_clock_override_test_la_LDFLAGS = $(GETCPU_LIBTOOL_FLAGS)
 lttng_ust_clock_override_test_la_SOURCES = lttng-ust-clock-override-test.c
 lttng_ust_clock_override_test_la_LIBADD = $(DL_LIBS)
 
-noinst_SCRIPTS = test_clock_override
-EXTRA_DIST = test_clock_override
+noinst_SCRIPTS = test_clock_override test_clock_arm_cntpct
+EXTRA_DIST = test_clock_override test_clock_arm_cntpct
 
 all-local:
 	@if [ x"$(srcdir)" != x"$(builddir)" ]; then \
diff --git a/tests/regression/ust/clock-override/test_clock_arm_cntpct b/tests/regression/ust/clock-override/test_clock_arm_cntpct
new file mode 100755
index 00000000..9d0be36e
--- /dev/null
+++ b/tests/regression/ust/clock-override/test_clock_arm_cntpct
@@ -0,0 +1,171 @@
+#!/bin/bash
+#
+# Copyright (C) - 2016 Anders Wallin <anders.wallin@windriver.com>
+#
+# This library is free software; you can redistribute it and/or modify it under
+# the terms of the GNU Lesser General Public License as published by the Free
+# Software Foundation; version 2.1 of the License.
+#
+# This library is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
+# details.
+#
+# You should have received a copy of the GNU Lesser General Public License
+# along with this library; if not, write to the Free Software Foundation, Inc.,
+# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA
+TEST_DESC="UST - Clock arm cntpct plugin"
+
+CURDIR=$(dirname $0)/
+TESTDIR=$CURDIR/../../..
+SESSION_NAME="clock_arm_cntpct"
+
+TESTAPP_PATH="$TESTDIR/utils/testapp"
+TESTAPP_NAME="gen-ust-events"
+TESTAPP_BIN="$TESTAPP_PATH/$TESTAPP_NAME/$TESTAPP_NAME"
+NUM_EVENT=256
+EVENT_NAME="tp:tptest"
+LTTNG_UST_CLOCK_PLUGIN_SO="/usr/lib/liblttng-ust-arm-cntpct-clock.so.0"
+
+METADATA_CLOCK_START_TOKEN="clock {"
+METADATA_CLOCK_END_TOKEN="};"
+
+METADATA_TOKEN_LIST=(
+	"name"
+	"description"
+	"freq"
+)
+
+UST_CLOCK_TOKEN_VALUE=(
+	"ARM_CNTPCT"
+	"ARM CNTPCT"
+	"256000000"
+)
+
+NUM_TESTS=23
+
+source $TESTDIR/utils/utils.sh
+
+# MUST set TESTDIR before calling those functions
+function run_app()
+{
+	$TESTAPP_BIN -i $NUM_EVENT
+	ok $? "Application done"
+}
+
+function extract_clock_metadata()
+{
+	local metadata_file=$1
+	local clock_metadata_file_destination=$2
+	cat $metadata_file \
+		| sed -n "/$METADATA_CLOCK_START_TOKEN/,/$METADATA_CLOCK_END_TOKEN/p" \
+		> $clock_metadata_file_destination
+	ok $? "Clock metadata extraction"
+}
+
+function extract_clock_metadata_token()
+{
+	local clock_metadata_file=$1
+	local token=$2
+	# Look for token and get value between ""
+	cat $clock_metadata_file | grep $token | awk -F"= |;" '{print $2}' | tr -d '"'
+}
+
+function test_getcpu_arm_cntpct_metadata()
+{
+	local ctf_metadata_file=$(mktemp -p $TRACE_PATH ctf-metadata.XXXXX)
+	local clock_metadata_file=$(mktemp -p $TRACE_PATH clock-metadata.XXXXX)
+	local result=""
+
+	diag "Clock arm cntpct plugin metadata test"
+
+	# LTTNG_UST_CLOCK_PLUGIN need to be defined for lttng-sessiond.
+	export LTTNG_UST_CLOCK_PLUGIN=$LTTNG_UST_CLOCK_PLUGIN_SO
+	start_lttng_sessiond
+	unset LTTNG_UST_CLOCK_PLUGIN
+
+	create_lttng_session_ok $SESSION_NAME $TRACE_PATH
+	enable_ust_lttng_event_ok $SESSION_NAME "$EVENT_NAME"
+	start_lttng_tracing_ok $SESSION_NAME
+	run_app
+	stop_lttng_tracing_ok $SESSION_NAME
+	destroy_lttng_session_ok $SESSION_NAME
+	stop_lttng_sessiond
+
+	$BABELTRACE_BIN -o ctf-metadata -w $ctf_metadata_file $TRACE_PATH
+	ok $? "Metadata extraction from babeltrace"
+
+	extract_clock_metadata $ctf_metadata_file $clock_metadata_file
+
+	test ${#METADATA_TOKEN_LIST[@]} -eq ${#UST_CLOCK_TOKEN_VALUE[@]}
+	ok $? "Tokens to check(${#METADATA_TOKEN_LIST[@]}) and provided values(${#UST_CLOCK_TOKEN_VALUE[@]}) count is equal"
+
+	local counter=0
+	while [ "$counter" -lt "${#METADATA_TOKEN_LIST[@]}" ]; do
+		result=$(extract_clock_metadata_token $clock_metadata_file \
+			${METADATA_TOKEN_LIST[$counter]})
+		test "$result" == "${UST_CLOCK_TOKEN_VALUE[$counter]}"
+		ok $? "Token \"${METADATA_TOKEN_LIST[$counter]}\" expect:${UST_CLOCK_TOKEN_VALUE[$counter]} got:$result"
+		let "counter++"
+	done
+	rm -rf $ctf_metadata_file
+	rm -rf $clock_metadata_file
+}
+
+function test_getcpu_arm_cntpct_timestamp()
+{
+	diag "Clock arm cntpct test"
+
+	# Test with clock arm cntpct plugin.
+	# LTTNG_UST_CLOCK_PLUGIN need to be defined for both lttng-sessiond.
+	diag "Plugin enabled"
+	export LTTNG_UST_CLOCK_PLUGIN=$LTTNG_UST_CLOCK_PLUGIN_SO
+	start_lttng_sessiond
+	create_lttng_session_ok $SESSION_NAME $TRACE_PATH
+	enable_ust_lttng_event_ok $SESSION_NAME "$EVENT_NAME"
+	start_lttng_tracing_ok $SESSION_NAME
+	run_app
+	unset LTTNG_UST_CLOCK_PLUGIN
+	stop_lttng_tracing_ok $SESSION_NAME
+	destroy_lttng_session_ok $SESSION_NAME
+	stop_lttng_sessiond
+
+	# Use Babeltrace with "-n all" to give a comma separated list for
+	# easy extraction of timestamps.
+	unique_timestamps_count=$($BABELTRACE_BIN -n all $TRACE_PATH | \
+		cut -d, -f1 | uniq | wc -l)
+	test $unique_timestamps_count -gt 1
+	ok $? "Unique event timestamps without clock arm cntpct: $unique_timestamps_count expect >1"
+}
+
+plan_tests $NUM_TESTS
+
+print_test_banner "$TEST_DESC"
+
+if [ -x "$LTTNG_UST_CLOCK_PLUGIN_SO" ]; then
+	foundobj=1
+else
+	foundobj=0
+fi
+
+skip $foundobj "No shared object generated. Skipping all tests." $NUM_TESTS && exit 0
+
+TESTS=(
+	"test_getcpu_arm_cntpct_metadata"
+	"test_getcpu_arm_cntpct_timestamp"
+)
+
+TEST_COUNT=${#TESTS[@]}
+i=0
+
+while [ "$i" -lt "$TEST_COUNT" ]; do
+
+	TRACE_PATH=$(mktemp -d)
+
+	# Execute test
+	${TESTS[$i]}
+
+	rm -rf $TRACE_PATH
+
+	let "i++"
+done
-- 
2.31.1

