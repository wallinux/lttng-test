From d4dcd6ecd93c1e2fc18e5ca7277d897be1d6e5d8 Mon Sep 17 00:00:00 2001
Message-Id: <d4dcd6ecd93c1e2fc18e5ca7277d897be1d6e5d8.1489408594.git.anders.wallin@windriver.com>
From: Anders Wallin <anders.wallin@windriver.com>
Date: Wed, 8 Mar 2017 08:00:01 +0100
Subject: [PATCH 1/1] AW

Signed-off-by: Anders Wallin <anders.wallin@windriver.com>
---
 src/common/consumer/consumer-stream.c  |  9 +++++++--
 src/common/consumer/consumer-timer.c   |  5 +++++
 src/common/consumer/consumer.c         |  9 +++++++++
 src/common/index/index.c               |  5 +++--
 src/common/ust-consumer/ust-consumer.c | 11 ++++++-----
 5 files changed, 30 insertions(+), 9 deletions(-)

diff --git a/src/common/consumer/consumer-stream.c b/src/common/consumer/consumer-stream.c
index 522b3cd5..f16ddfe8 100644
--- a/src/common/consumer/consumer-stream.c
+++ b/src/common/consumer/consumer-stream.c
@@ -86,6 +86,7 @@ void consumer_stream_relayd_close(struct lttng_consumer_stream *stream,
 			uatomic_read(&relayd->destroy_flag)) {
 		consumer_destroy_relayd(relayd);
 	}
+	DBG("AW");
 	stream->net_seq_idx = (uint64_t) -1ULL;
 	stream->sent_to_relayd = 0;
 }
@@ -103,6 +104,7 @@ void consumer_stream_close(struct lttng_consumer_stream *stream)
 	struct consumer_relayd_sock_pair *relayd;
 
 	assert(stream);
+	DBG("AW");
 
 	switch (consumer_data.type) {
 	case LTTNG_CONSUMER_KERNEL:
@@ -162,11 +164,12 @@ void consumer_stream_close(struct lttng_consumer_stream *stream)
 		}
 		stream->out_fd = -1;
 	}
-
+	DBG("AW1");
 	if (stream->index_file) {
 		lttng_index_file_put(stream->index_file);
 		stream->index_file = NULL;
 	}
+	DBG("AW2");
 
 	/* Check and cleanup relayd if needed. */
 	rcu_read_lock();
@@ -241,7 +244,7 @@ void consumer_stream_free(struct lttng_consumer_stream *stream)
 void consumer_stream_destroy_buffers(struct lttng_consumer_stream *stream)
 {
 	assert(stream);
-
+	DBG("AW");
 	switch (consumer_data.type) {
 	case LTTNG_CONSUMER_KERNEL:
 		break;
@@ -364,6 +367,7 @@ int consumer_stream_write_index(struct lttng_consumer_stream *stream,
 	assert(stream);
 	assert(element);
 
+	DBG("AW");
 	rcu_read_lock();
 	relayd = consumer_find_relayd(stream->net_seq_idx);
 	if (relayd) {
@@ -372,6 +376,7 @@ int consumer_stream_write_index(struct lttng_consumer_stream *stream,
 				stream->relayd_stream_id, stream->next_net_seq_num - 1);
 		pthread_mutex_unlock(&relayd->ctrl_sock_mutex);
 	} else {
+		DBG("AW");
 		if (lttng_index_file_write(stream->index_file, element)) {
 			ret = -1;
 		} else {
diff --git a/src/common/consumer/consumer-timer.c b/src/common/consumer/consumer-timer.c
index 931f7471..1351856d 100644
--- a/src/common/consumer/consumer-timer.c
+++ b/src/common/consumer/consumer-timer.c
@@ -122,6 +122,7 @@ static int send_empty_index(struct lttng_consumer_stream *stream, uint64_t ts,
 	memset(&index, 0, sizeof(index));
 	index.stream_id = htobe64(stream_id);
 	index.timestamp_end = htobe64(ts);
+	DBG("AW");
 	ret = consumer_stream_write_index(stream, &index);
 	if (ret < 0) {
 		goto error;
@@ -242,6 +243,7 @@ int consumer_flush_ust_index(struct lttng_consumer_stream *stream)
 			PERROR("ustctl_get_stream_id");
 			goto end;
 		}
+		DBG("AW");
 		DBG("Stream %" PRIu64 " empty, sending beacon", stream->key);
 		ret = send_empty_index(stream, ts, stream_id);
 		if (ret < 0) {
@@ -294,6 +296,7 @@ static int check_ust_stream(struct lttng_consumer_stream *stream)
 		}
 		break;
 	}
+	DBG("AW");
 	ret = consumer_flush_ust_index(stream);
 	pthread_mutex_unlock(&stream->lock);
 end:
@@ -330,6 +333,7 @@ static void live_timer(struct lttng_consumer_local_data *ctx,
 				ht->hash_fct(&channel->key, lttng_ht_seed),
 				ht->match_fct, &channel->key, &iter.iter,
 				stream, node_channel_id.node) {
+			DBG("AW");
 			ret = check_ust_stream(stream);
 			if (ret < 0) {
 				goto error_unlock;
@@ -588,6 +592,7 @@ void *consumer_timer_thread(void *data)
 			cmm_smp_mb();
 			DBG("Signal timer metadata thread teardown");
 		} else if (signr == LTTNG_CONSUMER_SIG_LIVE) {
+			DBG("AW");
 			live_timer(ctx, info.si_signo, &info, NULL);
 		} else {
 			ERR("Unexpected signal %d\n", info.si_signo);
diff --git a/src/common/consumer/consumer.c b/src/common/consumer/consumer.c
index 53104dcf..712652a5 100644
--- a/src/common/consumer/consumer.c
+++ b/src/common/consumer/consumer.c
@@ -215,6 +215,7 @@ static void steal_stream_key(uint64_t key, struct lttng_ht *ht)
 	rcu_read_lock();
 	stream = find_stream(key, ht);
 	if (stream) {
+		DBG("AW");
 		stream->key = (uint64_t) -1ULL;
 		/*
 		 * We don't want the lookup to match, but we still need
@@ -267,6 +268,7 @@ static void steal_channel_key(uint64_t key)
 	rcu_read_lock();
 	channel = consumer_find_channel(key);
 	if (channel) {
+		DBG("AW");
 		channel->key = (uint64_t) -1ULL;
 		/*
 		 * We don't want the lookup to match, but we still need to iterate on
@@ -331,6 +333,8 @@ void consumer_destroy_relayd(struct consumer_relayd_sock_pair *relayd)
 	int ret;
 	struct lttng_ht_iter iter;
 
+	DBG("AW");
+
 	if (relayd == NULL) {
 		return;
 	}
@@ -754,15 +758,19 @@ struct consumer_relayd_sock_pair *consumer_find_relayd(uint64_t key)
 	struct lttng_ht_node_u64 *node;
 	struct consumer_relayd_sock_pair *relayd = NULL;
 
+	DBG("AW");
 	/* Negative keys are lookup failures */
 	if (key == (uint64_t) -1ULL) {
+		DBG("AWFAIL key -1");
 		goto error;
 	}
 
 	lttng_ht_lookup(consumer_data.relayd_ht, &key,
 			&iter);
 	node = lttng_ht_iter_get_node_u64(&iter);
+	DBG("AW1");
 	if (node != NULL) {
+		DBG("AW2");
 		relayd = caa_container_of(node, struct consumer_relayd_sock_pair, node);
 	}
 
@@ -861,6 +869,7 @@ void close_relayd_stream(struct lttng_consumer_stream *stream)
 {
 	struct consumer_relayd_sock_pair *relayd;
 
+	DBG("AW");
 	/* The stream is not metadata. Get relayd reference if exists. */
 	rcu_read_lock();
 	relayd = consumer_find_relayd(stream->net_seq_idx);
diff --git a/src/common/index/index.c b/src/common/index/index.c
index d91eee65..4d809a53 100644
--- a/src/common/index/index.c
+++ b/src/common/index/index.c
@@ -204,7 +204,7 @@ struct lttng_index_file *lttng_index_file_open(const char *path_name,
 
 	assert(path_name);
 	assert(channel_name);
-
+	DBG("AW");
 	index_file = zmalloc(sizeof(*index_file));
 	if (!index_file) {
 		PERROR("allocating lttng_index_file");
@@ -263,7 +263,7 @@ struct lttng_index_file *lttng_index_file_open(const char *path_name,
 	index_file->minor = minor;
 	index_file->element_len = element_len;
 	urcu_ref_init(&index_file->ref);
-
+	DBG("AW");
 	return index_file;
 
 error_close:
@@ -292,6 +292,7 @@ static void lttng_index_file_release(struct urcu_ref *ref)
 	struct lttng_index_file *index_file = caa_container_of(ref,
 			struct lttng_index_file, ref);
 
+	DBG("AW");
 	if (close(index_file->fd)) {
 		PERROR("close index fd");
 	}
diff --git a/src/common/ust-consumer/ust-consumer.c b/src/common/ust-consumer/ust-consumer.c
index 4b02df96..89e6da71 100644
--- a/src/common/ust-consumer/ust-consumer.c
+++ b/src/common/ust-consumer/ust-consumer.c
@@ -2077,7 +2077,7 @@ void lttng_ustconsumer_del_stream(struct lttng_consumer_stream *stream)
 {
 	assert(stream);
 	assert(stream->ustream);
-
+	DBG("AW");
 	if (stream->chan->switch_timer_enabled == 1) {
 		consumer_timer_switch_stop(stream->chan);
 	}
@@ -2607,7 +2607,7 @@ int lttng_ustconsumer_on_recv_stream(struct lttng_consumer_stream *stream)
 	int ret;
 
 	assert(stream);
-
+	DBG("AW");
 	/* Don't create anything if this is set for streaming. */
 	if (stream->net_seq_idx == (uint64_t) -1ULL && stream->chan->monitor) {
 		ret = utils_create_stream_file(stream->chan->pathname, stream->name,
@@ -2621,7 +2621,7 @@ int lttng_ustconsumer_on_recv_stream(struct lttng_consumer_stream *stream)
 
 		if (!stream->metadata_flag) {
 			struct lttng_index_file *index_file;
-
+			DBG("AW");
 			index_file = lttng_index_file_create(stream->chan->pathname,
 					stream->name, stream->uid, stream->gid,
 					stream->chan->tracefile_size,
@@ -2725,7 +2725,7 @@ void lttng_ustconsumer_close_metadata(struct lttng_consumer_channel *metadata)
 	if (metadata->switch_timer_enabled == 1) {
 		consumer_timer_switch_stop(metadata);
 	}
-
+	DBG("AW1");
 	if (!metadata->metadata_stream) {
 		goto end;
 	}
@@ -2734,6 +2734,7 @@ void lttng_ustconsumer_close_metadata(struct lttng_consumer_channel *metadata)
 	 * Closing write side so the thread monitoring the stream wakes up if any
 	 * and clean the metadata stream.
 	 */
+	DBG("AW2");
 	if (metadata->metadata_stream->ust_metadata_poll_pipe[1] >= 0) {
 		ret = close(metadata->metadata_stream->ust_metadata_poll_pipe[1]);
 		if (ret < 0) {
@@ -2741,7 +2742,7 @@ void lttng_ustconsumer_close_metadata(struct lttng_consumer_channel *metadata)
 		}
 		metadata->metadata_stream->ust_metadata_poll_pipe[1] = -1;
 	}
-
+	DBG("AW3");
 end:
 	return;
 }
-- 
2.11.0

